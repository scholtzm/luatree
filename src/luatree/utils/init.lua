---------------------------------------------
-- Utils Module
-- @author: Michael Scholtz
---------------------------------------------

---------------------------------------------
-- Public methods
---------------------------------------------

--- AST tree debugger.
-- Helper function to debug and visualize AST trees... and ignore the rest.
-- @param t valid AST tree
-- @param keychain optional parameter to modify keychain
local function print_tree(t, keychain)
    keychain = keychain or ""

    for k, v in pairs(t) do
           -- ignore parent
        if k ~= "parent" and
           -- ignore all hypergraph cyclic stuff
           k ~= "hypergraph" and k ~= "hypergraphnode" and k ~= "nodeid_references" and
           -- ignore metrics and luaDoc stuff
           k ~= "metrics" and k ~= "luaDoc_functions" and k ~= "luaDoc_tables"
           then
            if type(v) == "table" then
                print_tree(v, keychain .. "[" .. tostring(k) .. "]")
            else
                print(keychain .. "[" .. tostring(k) .. "] " .. tostring(v))
            end
        end
    end
end

--- Hypergraph debugger
-- Helper function to debug and viualize Hypergraph produced by luametrics
-- REMARK: You can also call this function with only list of 'Nodes'
-- or list of 'Edges' accordingly
-- @param t valid Hypergraph or see remark
-- @param keychain optional parameter to modify keychain
local function print_hypergraph(t, keychain)
    keychain = keychain or ""

    for k, v in pairs(t) do
        -- These are either 'huge' or cause recurssion - no reason to print these
        if k ~= "parent" and k ~= "hypergraphnode" and k ~= "metrics" and k ~= "data" then
            if type(v) == "table" then
                print_hypergraph(v, keychain .. "[" .. tostring(k) .. "]")
            else
                print(keychain .. "[" .. tostring(k) .. "] " .. tostring(v))
            end
        end
    end
end

--- Helper function to print flags for a given subtree.
-- @param node Subtree root
local function print_tree_flags(node)
    print(node.flag)

    for i = 1, #node.data do
        print_tree_flags(node.data[i])
    end
end

--- Helper function to get flag count.
-- @param node Subtree root
-- @param flag_type Flag type as string
local function get_tree_flag_count(node, flag_type)
    local count = 0

    if node.flag == flag_type then
        count = count + 1
    end

    for i = 1, #node.data do
        count = count + get_tree_flag_count(node.data[i], flag_type)
    end

    return count
end

--- Helper function to print complete graph structure.
-- @param graph Graph structure
local function print_graph(t, keychain)
    keychain = keychain or ""

    for k, v in pairs(t) do
        if type(v) == "table" and  k ~= "parent"  and k ~= "metrics" then
            print_graph(v, keychain .. "[" .. tostring(k) .. "]")
        else
            print(keychain .. "[" .. tostring(k) .. "] " .. tostring(v))
        end
    end
end

--- Helper function to print out graph information.
-- @param luadb.hypegraph Hypergraph generated by luadb
local function print_graph_simple(graph)
    graph:printNodes()
    graph:printEdges()
end

--- Helper function to print graph flags.
-- @param luadb.hypergraph Hypergraph generated by luadb
local function print_graph_flags(graph)
    for i, v in ipairs(graph.nodes) do
        print(i, v.data.name, v.flag)
    end

    for i, v in ipairs(graph.edges) do
        io.write(tostring(i) .. " ")
        io.write(tostring(v.flag) .. " ")
        io.write(tostring(v.meta.calleeFunction) .. " --> " .. tostring(v.meta.calledFunction))
        print(" [" .. tostring(v.data.text) .. "]")
    end
end

--- Helper function to get graph flag counts.
-- @param luadb.hypergrapg Hypergraph generated by luadb
-- @param flag_type Flag type as string
-- @return Total count, node count, edge count
local function get_graph_flag_count(graph, flag_type)
    local count_nodes = 0
    local count_edges = 0

    for i, v in ipairs(graph.nodes) do
        if v.flag == flag_type then
            count_nodes = count_nodes + 1
        end
    end

    for i, v in ipairs(graph.edges) do
        if v.flag == flag_type then
            count_edges = count_edges + 1
        end
    end   

    return count_nodes+count_edges, count_nodes, count_edges 
end

--- Simple function to print all function calls.
-- This function prints function calls added using
-- merge_graph_into_AST function.
-- @param ast AST tree produced by luametrics
local function print_all_hypergraph_calls(ast)
    local hypergraph = ast.hypergraph or ast

    for node in pairs(hypergraph.Nodes) do
        for incidence, edge in pairs(hypergraph[node]) do
            if incidence.label == "caller" and edge.label == "call" then
                local nodename = node.data.name or node.label
                local message = "Caller: " .. nodename .. " (" .. node.label .. ") @ " .. node.data.position .. "; "

                for incidence, node in pairs(hypergraph[edge]) do
                    if incidence.label == "callee" then
                        message = message .. "Callee: " .. node.data.name .. " (" .. node.label .. ") @ " .. node.data.position .. "; "
                    elseif incidence.label == "callpoint" then
                        message = message .. "Callpoint: " .. node.data.str .. " (" .. node.label .. ") @ " .. node.data.position .. "; "
                    end
                end

                print(message)
            end
        end
    end
end

local function count_all_hypergraph_calls(ast)
    local hypergraph = ast.hypergraph or ast
    local count = 0

    for edge in pairs(hypergraph.Edges) do
        if edge.label == "call" then
            count = count + 1
        end
    end

    return count
end

--- Get all hypergraph nodes by their label.
-- @param ast AST tree produced by luametrics
-- @param label label string
-- @return table of results
local function get_hypergraph_nodes_by_label(ast, label)
    local hypergraph = ast.hypergraph or ast
    local result = {}

    for node in pairs(hypergraph.Nodes) do
        if node.label == label then
            table.insert(result, node)
        end
    end

    return result
end

--- Helper function to print table.
-- @param table Lua table
local function print_table(table)
    for k, v in pairs(table) do
        print(k, v)
    end
end

--- Helper function to detect live tables.
-- Detects non-empty tables.
-- @param table Lua table
local function live_table(table)
    if table == nil or #table == 0 then
        return false
    end

    return true
end

--- Counts number of keys in a table.
-- @param table Lua table
local function count_table(table)
    local count = 0

    for _ in pairs(table) do
        count = count + 1
    end

    return count
end

--- Helper function to see if file exists.
-- @param file File path
local function file_exists(file)
    local file = io.open(file, "r")
    if file then
        file:close()
        return true
    else
        return false
    end
end

--- Helper function to read complete file.
-- @param file File path
local function read_file(file)
    if file_exists(file) then
        local file = io.open(file, "r")
        local code = file:read("*a")
        file:close()

        return code
    else
        error("File " .. file .. " does not exist.")
    end
end

---------------------------------------------
-- Module definition
---------------------------------------------

return {
    -- ast
    print_tree = print_tree,
    print_hypergraph = print_hypergraph,
    print_tree_flags = print_tree_flags,
    get_tree_flag_count = get_tree_flag_count,
    -- graph
    print_graph = print_graph,
    print_graph_simple = print_graph_simple,
    print_graph_flags = print_graph_flags,
    get_graph_flag_count = get_graph_flag_count,
    -- luametrics hypergraph
    print_all_hypergraph_calls = print_all_hypergraph_calls,
    count_all_hypergraph_calls = count_all_hypergraph_calls,
    get_hypergraph_nodes_by_label = get_hypergraph_nodes_by_label,
    -- generic
    print_table = print_table,
    live_table = live_table,
    count_table = count_table,
    file_exists = file_exists,
    read_file = read_file
}
