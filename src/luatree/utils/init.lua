---------------------------------------------
-- Utils Module
-- @author: Michael Scholtz
---------------------------------------------

require("logging")

---------------------------------------------
-- Public methods
---------------------------------------------

--- Logger instance.
local logger = logging.new(
    function(self, level, message)
        print(level, message)
        return true
    end
)

--- AST tree debugger.
-- Helper function to debug and visualize AST trees.
-- @param t valid AST tree
-- @param keychain optional parameter to modify keychain
local function print_tree(t, keychain)
    keychain = keychain or ""

    for k, v in pairs(t) do
        if k ~= "parent" then
            if type(v) == "table" then
                print_tree(v, keychain .. "[" .. k .. "]")
            else
                print(keychain .. "[" .. k .. "] " .. tostring(v))
            end
        end
    end
end

--- Helper function to print flags for a given subtree.
-- @param node Subtree root
local function print_tree_flags(node)
    print(node.flag)

    for i = 1, #node.data do
        print_tree_flags(node.data[i])
    end
end

--- Helper function to get flag count.
-- @param node Subtree root
-- @param flag_type Flag type as string
local function get_tree_flag_count(node, flag_type)
    local count = 0

    if node.flag == flag_type then
        count = count + 1
    end

    for i = 1, #node.data do
        count = count + get_tree_flag_count(node.data[i], flag_type)
    end

    return count
end

--- Helper function to print complete graph structure.
-- @param graph Graph structure
local function print_graph(t, keychain)
    keychain = keychain or ""

    for k, v in pairs(t) do
        if type(v) == "table" and  k ~= "parent"  and k ~= "metrics" then
            print_graph(v, keychain .. "[" .. k .. "]")
        else
            print(keychain .. "[" .. k .. "] " .. tostring(v))
        end
    end
end

--- Helper function to print out graph information.
-- @param luadb.hypegraph Hypergraph generated by luadb
local function print_graph_simple(graph)
    graph:printNodes()
    graph:printEdges()
end

--- Helper function to print graph flags.
-- @param luadb.hypergraph Hypergraph generated by luadb
local function print_graph_flags(graph)
    for i, v in ipairs(graph.nodes) do
        print(i, v.data.name, v.flag)
    end

    for i, v in ipairs(graph.edges) do
        io.write(tostring(i) .. " ")
        io.write(tostring(v.flag) .. " ")
        io.write(tostring(v.meta.calleeFunction) .. " --> " .. tostring(v.meta.calledFunction))
        print(" [" .. tostring(v.data.text) .. "]")
    end
end

--- Helper function to get graph flag counts.
-- @param luadb.hypergrapg Hypergraph generated by luadb
-- @param flag_type Flag type as string
-- @return Total count, node count, edge count
local function get_graph_flag_count(graph, flag_type)
    local count_nodes = 0
    local count_edges = 0

    for i, v in ipairs(graph.nodes) do
        if v.flag == flag_type then
            count_nodes = count_nodes + 1
        end
    end

    for i, v in ipairs(graph.edges) do
        if v.flag == flag_type then
            count_edges = count_edges + 1
        end
    end   

    return count_nodes+count_edges, count_nodes, count_edges 
end

--- Helper function to print table.
-- @param table Lua table
local function print_table(table)
    for k, v in pairs(table) do
        print(k, v)
    end
end

--- Helper function to see if file exists.
-- @param file File path
local function file_exists(file)
    local file = io.open(file, "r")
    if file then
        file:close()
        return true
    else
        return false
    end
end

--- Helper function to read complete file.
-- @param file File path
local function read_file(file)
    if file_exists(file) then
        local file = io.open(file, "r")
        local code = file:read("*a")
        file:close()

        return code
    else
        error("File " .. file .. " does not exist.")
    end
end

---------------------------------------------
-- Module definition
---------------------------------------------

return {
    -- logger
    logger = logger,
    -- ast
    print_tree = print_tree,
    print_tree_flags = print_tree_flags,
    get_tree_flag_count = get_tree_flag_count,
    -- graph
    print_graph = print_graph,
    print_graph_simple = print_graph_simple,
    print_graph_flags = print_graph_flags,
    get_graph_flag_count = get_graph_flag_count,
    -- generic
    print_table = print_table,
    file_exists = file_exists,
    read_file = read_file
}
